The cryptography library in Python provides a set of cryptographic recipes and primitives to help you secure your data and applications. Here are some basic examples of how to use cryptography for common cryptographic operations:

1. Installing cryptography:

You can install cryptography using pip:

bash

pip install cryptography

2. Generating Random Cryptographically Secure Data:

You can use secrets from the cryptography library to generate random data securely:

python

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# Generate a random 16-byte (128-bit) key
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)

# Serialize the private key to PEM format
pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

# Save the private key to a file
with open('private_key.pem', 'wb') as f:
    f.write(pem)

3. Encrypting and Decrypting Data:

You can use Fernet from cryptography.fernet to perform symmetric encryption:

python

from cryptography.fernet import Fernet

# Generate a random Fernet key
key = Fernet.generate_key()
cipher_suite = Fernet(key)

# Encrypt data
data = b"Hello, cryptography!"
cipher_text = cipher_suite.encrypt(data)
print(cipher_text)

# Decrypt data
plain_text = cipher_suite.decrypt(cipher_text)
print(plain_text.decode())

4. Hashing Data:

You can use various cryptographic hashes, such as SHA-256, to hash data:

python

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.asymmetric import rsa

message = b"Hello, cryptography!"
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)
public_key = private_key.public_key()

# Sign the message
signature = private_key.sign(
    message,
    padding.PKCS1v15(),
    hashes.SHA256()
)

# Verify the signature
try:
    public_key.verify(
        signature,
        message,
        padding.PKCS1v15(),
        hashes.SHA256()
    )
    print("Signature is valid.")
except:
    print("Signature is invalid.")

5. Secure Password Hashing:

cryptography also provides support for securely hashing and verifying passwords:

python

from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
import os

# Create a salt (a random value that is unique for each user)
salt = os.urandom(16)

# Create a password
password = b"my_secure_password"

# Hash the password with PBKDF2-HMAC-SHA256
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA256(),
    iterations=100000,
    salt=salt,
    length=32,
)

key = kdf.derive(password)

# Store 'key' and 'salt' securely

These are some basic examples of how to use the cryptography library for various cryptographic operations in Python. It's essential to use cryptographic libraries correctly and securely in your applications to protect sensitive data and ensure the privacy and integrity of your communication.
